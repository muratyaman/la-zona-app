{"version":3,"sources":["config.js","components/TargetSvg.jsx","components/ZoneMap.jsx","pages/ZonePage.jsx","pages/HomePage.jsx","components/GeoTracker.jsx","components/InTheZone.jsx","App.jsx","serviceWorker.js","index.js"],"names":["defaultPosition","coords","longitude","latitude","config","map","factorySettings","accessToken","process","interactive","trackResize","componentDefaultProps","center","zoom","TargetSvg","props","viewBox","width","height","className","cx","cy","r","Mapbox","ReactMapboxGl","ZoneMap","mapProps","zone","sourceNode","layerNode","sourceProps","id","type","data","geometry","coordinates","layerProps","source","layout","paint","markerProps","style","backgroundColor","borderRadius","ZonePage","getCenter","position","state","containerStyle","this","React","Component","HomePage","GeoTracker","onSuccess","console","info","setState","onNewPosition","onError","error","watchId","navigator","geolocation","watchPosition","enableHighAccuracy","timeout","maximumAge","clearWatch","Math","round","InTheZone","myPoint","geoJson","message","geoContains","log","App","to","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","catch","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0e49d34b.chunk.js","sourcesContent":["// Royal Air Force Memorial\nconst defaultPosition = {\n  coords: {\n    longitude: -0.1235005,\n    latitude:  51.5040432,\n  },\n}\n\nexport const config = {\n  defaultPosition,\n  map: {\n    factorySettings: {\n      accessToken: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,\n      // minZoom: 0,\n      // maxZoom: 20,\n      interactive: false,\n      trackResize: true,\n    },\n    componentDefaultProps: {\n      center: [ defaultPosition.coords.longitude, defaultPosition.coords.latitude ],\n      zoom: [ 13 ],  // Default: [ 11 ]\n      // pitch: [ 30 ], // Pitch (tilt) of the map at initialisation, range : 0 - 60\n    },\n  },\n};\n\n","import React from 'react';\n\nexport function TargetSvg(props) {\n  return (\n    <svg viewBox=\"0 0 20 20\" width=\"20\" height=\"20\">\n      <circle className=\"big\" cx=\"10\" cy=\"10\" r=\"9\"/>\n      <circle className=\"small\" cx=\"10\" cy=\"10\" r=\"4\"/>\n    </svg>\n  );\n}\n","import React from 'react';\nimport ReactMapboxGl, { Marker, Source, Layer } from 'react-mapbox-gl';\nimport { config } from '../config';\nimport { TargetSvg } from './TargetSvg';\n\n// factory @see: https://github.com/alex3165/react-mapbox-gl/blob/master/docs/API.md\nconst Mapbox = ReactMapboxGl(config.map.factorySettings);\n\nexport function ZoneMap(props) {\n  const mapProps = {\n    ...config.map.componentDefaultProps,\n    ...props,\n  };\n  const { center, zone } = mapProps;\n  let sourceNode = null, layerNode = null;\n  if (zone) {\n    const geoJson = {\n      type: 'Feature',\n      geometry: {\n        type: 'Polygon',\n        coordinates: [ zone ],\n      },\n    };\n    const sourceProps = {\n      id: 'zoneSource',\n      type: 'geojson',\n      data: geoJson,\n    };\n    const layerProps = {\n      id: 'zoneLayer',\n      source: 'zoneSource',\n      //data: geoJson,\n      type: 'fill',\n      layout: {\n        //visibility: 'visible',\n      },\n      paint: {\n        'fill-color': '#700',\n        'fill-opacity': 0.5,\n      },\n    };\n    sourceNode = <Source {...sourceProps} />;\n    layerNode = <Layer {...layerProps} />;\n  }\n  const markerProps = {\n    coordinates: center,\n    style: {\n      backgroundColor: 'white',\n      width: '20px',\n      height: '20px',\n      borderRadius: '50%',\n    },\n  }\n  return (\n    <Mapbox { ...mapProps }>\n      <Marker {...markerProps}><TargetSvg /></Marker>\n      {sourceNode}\n      {layerNode}\n    </Mapbox>\n  );\n}\n","import React from 'react';\nimport { ZoneMap } from '../components/ZoneMap';\n\nclass ZonePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  getCenter = () => {\n    const { position } = this.props;\n    const { longitude, latitude } = position.coords;\n    return [longitude, latitude];\n  }\n\n  render() {\n    const mapProps = {\n      style: 'mapbox://styles/mapbox/streets-v9',\n      containerStyle: {\n        height: '99vh',\n        width: '99vw',\n      },\n      center: this.getCenter(),\n      zone: this.props.zone, // custom prop\n    }\n    return (\n      <div className=\"page page-zone\">\n        <ZoneMap {...mapProps} />\n      </div>\n    );\n  }\n}\n\nexport default ZonePage;\n","import React from 'react';\n\nclass HomePage extends React.Component {\n  render() {\n    return (\n      <div className=\"page page-home\">\n        <h1>Hello!</h1>\n        <p>La Zona App can notify you when you are in a congestion charge zone.</p>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React from 'react';\n\nexport class GeoTracker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      position: { ...props.defaultPosition },\n      error: null,\n    };\n    this.watchId = null;\n  }\n\n  // @see https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPosition\n  onSuccess = (position) => {\n    console.info('GeoTracker.onSuccess', position);\n    this.setState({\n      position,\n    });\n    const { onNewPosition } = this.props;\n    if (onNewPosition && (typeof onNewPosition === 'function')) {\n      onNewPosition(position);\n    }\n  }\n\n  // @see https://developer.mozilla.org/en-US/docs/Web/API/GeolocationPositionError\n  onError = (error) => {\n    console.error('GeoTracker.onError', error);\n    this.setState({\n      error,\n    });\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      // @see https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions\n      const options = {\n        enableHighAccuracy: true,\n        timeout:            15 * 1000, // default is Infinity\n        maximumAge:         15 * 1000, // default is 0; 0: use no cache, Infinity: use cache\n      };\n      this.watchId = navigator.geolocation.watchPosition(\n        this.onSuccess,\n        this.onError,\n        options,\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    if (navigator.geolocation && this.watchId) {\n      navigator.geolocation.clearWatch(this.watchId);\n    }\n  }\n\n  render() {\n    let { longitude  = null, latitude = null } = this.state.position.coords;\n    if (longitude !== null) longitude = Math.round(longitude * 10000) / 10000;\n    if (latitude !== null) latitude = Math.round(latitude * 10000) / 10000;\n    return (\n      <i>({latitude}, {longitude})</i>\n    );\n  }\n}","import React from 'react';\nimport { geoContains } from 'd3-geo';\n\nexport function InTheZone(props) {\n  const { position, zone } = props;\n  if (!position || !zone) return null; // no need to render anything\n  const { coords } = position;\n  if (!coords) return null;\n  const { longitude, latitude } = coords;\n  const myPoint = [longitude, latitude]; // [longitude, latitude] in degrees\n  const geoJson = {\n    type: 'Polygon',\n    coordinates: [ zone ],\n  };\n  const message = geoContains(geoJson, myPoint) ? 'You are in the zone!' : ' ';\n  console.log(myPoint, 'InTheZone', geoJson, 'message', message);\n  return (\n    <i>{message}</i>\n  );\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport { config } from './config';\nimport ZonePage from './pages/ZonePage';\nimport HomePage from './pages/HomePage';\nimport { GeoTracker } from './components/GeoTracker';\nimport { InTheZone } from './components/InTheZone';\n\nimport london from './data/london.json'; // TODO: use api\n\nconst zone = london;//.map(([lat, lon]) => ([lon, lat]));\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      position: config.defaultPosition,\n    }\n  }\n\n  onNewPosition = position => {\n    this.setState({ position });\n  }\n\n  render() {\n    const { position } = this.state;\n    return (\n      <>\n        <Router>\n            <nav>\n              <ul>\n                <li><Link to=\"/\">La Zona</Link></li>\n                <li><Link to=\"/zone\">Zone</Link></li>\n                <li className='inthezone'><InTheZone position={position} zone={zone} /></li>\n                <li className='geotracker'><GeoTracker defaultPosition={position} onNewPosition={this.onNewPosition} /></li>\n              </ul>\n            </nav>\n            <main>\n              <Switch>\n                <Route path=\"/zone\"><ZonePage position={position} zone={zone} /></Route>\n                <Route path=\"/\"><HomePage /></Route>\n              </Switch>\n            </main>\n        </Router>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//ReactDOM.render(<React.StrictMode><App /></React.StrictMode>, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// ref: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}